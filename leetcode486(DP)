題目:給定一數組 1P選擇最右邊或最左邊 2P同理 直到選完 判斷是否P1一定能贏

Input: [1, 5, 2]
Output: False
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return False.

參考比較
class Solution:
    def PredictTheWinner(self, nums: List[int]) -> bool:
        n=len(nums)
        if n % 2 == 0: return True # can always win by picking larger one of odd or even subarray 這部分沒想通
        dp = nums[:]
        for i in range(1, n):
            for j in range(n - i):
                dp[j] = max(nums[j] - dp[j + 1], nums[j + i] - dp[j]) 改為一維代換不用都記錄 變成1 12 123 1234....
        
        return dp[0] >= 0
原始        
class Solution:
    def PredictTheWinner(self, nums: List[int]) -> bool:
        n=len(nums)
        dp = [[0 for i in range(n)]for i in range(n)] 初始化一個2維陣列其定義為d[i][j]為i到j P1能贏的點數
        for i in range(0,n):
            dp[i][i]=nums[i]  從自己到自己 一定是贏自己
        for i in range(n-1, 0,-1):  把0 0 到n n 都跑完 O(^2)
            for j in range(i+1,n):
                dp[j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])
        
        return dp[0][n-1] >= 0  取1到n的結果        
