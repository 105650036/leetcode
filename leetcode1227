題目 給1個數字n 第k個客人假定坐在第k個位置 但第一個人可以隨便坐 其他人有兩個作法 1.如果本來的位置是空的就坐 2.如果被坐了就可以隨機坐

給定n=1時 機率p=1.0000 n=2 p=0.5000
則給數字n時的機率 這個題目在分類上有兩種 第一種是dynamic programming 第二種是math 但我一開始沒想到純數學的方法 所以使用dp的方法
可以想到p(n)=1/n*(p(n-1)+....+p(1)) 原因是第一個人是隨機坐 而p(n)是第n個人能坐到n號位的機率 第一個人坐到每個位置的機率是1/n也就是說每個p的發生率都是1/n
class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:
        if n == 1:
            return 1
        if n == 2:
            return 0.5
        dp = [0] * (n + 1)  
        dp[1] = 1
        dp[2] = 0.5
        sumdp = 1.5
        for i in range(3, n + 1):
            dp[i] = (1.0 / i) * sumdp 不斷累加的過程
            sumdp += dp[i]
        return dp[-1]
        
        但最後發現這可以用單純數學的方法去解
        假定 第k個人的位置被坐了則有3種可能
        1.他坐第一個位置 則除了k皆可坐到原位
        
        2.他坐到第n個位置則n坐不到原位
        
        3.坐k到n之間的位置則回到問題的頭
        
        而1和2發生的機率相等 所以除了n=1 p=1之外其他皆等於0.5
